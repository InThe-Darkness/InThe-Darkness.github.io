(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{567:function(e,n,s){"use strict";s.r(n);var a=s(13),t=Object(a.a)({},(function(){var e=this,n=e.$createElement,s=e._self._c||n;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"chapter-1"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#chapter-1"}},[e._v("#")]),e._v(" Chapter 1")]),e._v(" "),s("p",[e._v("gdb "),s("code",[e._v("startfile")])]),e._v(" "),s("p",[e._v("set width w(a number)")]),e._v(" "),s("p",[e._v("break breakpoint "),s("code",[e._v("it could be line number|function name|address")])]),e._v(" "),s("p",[e._v("run")]),e._v(" "),s("p",[e._v("n "),s("code",[e._v("next. line")])]),e._v(" "),s("p",[e._v("s "),s("code",[e._v("step. into the function")])]),e._v(" "),s("p",[e._v("bt "),s("code",[e._v("backtrace.")])]),e._v(" "),s("p",[e._v("p lquote "),s("code",[e._v("print. the value of lquote")])]),e._v(" "),s("ul",[s("li",[e._v("you can also use "),s("code",[e._v("p")]),e._v(" to assign a specific value to an element,such as "),s("code",[e._v("p len_lquote=strlen(lquote)")])])]),e._v(" "),s("blockquote",[s("p",[e._v("We can set them to better values using the p command, since it can print the value of any expression—and that expression can include subroutine calls and assignments.")])]),e._v(" "),s("p",[e._v("l "),s("code",[e._v("list. the source surrounding the current line(10 lines by default)")])]),e._v(" "),s("ul",[s("li",[e._v('you can use "l 50" to display the source surrounding the 50th line')])]),e._v(" "),s("p",[e._v("c "),s("code",[e._v("continue.")])]),e._v(" "),s("h1",{attrs:{id:"chapter-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#chapter-2"}},[e._v("#")]),e._v(" Chapter 2")]),e._v(" "),s("p",[e._v("Ctrl-d "),s("code",[e._v("Program exited normally")])]),e._v(" "),s("p",[e._v("q "),s("code",[e._v("quit. the gdb")])]),e._v(" "),s("blockquote",[s("p",[e._v("The most usual way to start gdb is with one argument, specifying an executable program:"),s("code",[e._v("gdb program")]),e._v("\nYou can also start with both an executable program and a core file specified:"),s("code",[e._v("gdb program core")]),e._v("\nYou can, instead, specify a process ID as a second argument or use option -p, if youwant to debug a running process:"),s("code",[e._v("gdb program 1234|gdb -p 1234")])])]),e._v(" "),s("blockquote",[s("p",[s("code",[e._v("gdb --args gcc -O2 -c foo.c")]),e._v("This will cause gdb to debug gcc, and to set gcc’s command-line arguments (see\nSection 4.3 [Arguments], page 34) to ‘-O2 -c foo.c.")])]),e._v(" "),s("p",[e._v("gdb --silent|-quiet|-q "),s("code",[e._v("Do not print the introductory and copyright message")])]),e._v(" "),s("p",[e._v("gdb --help | gdb -h")]),e._v(" "),s("p",[e._v("gdb --cd directory "),s("code",[e._v("Run gdb using directory as its working directory, instead of the current directory")])]),e._v(" "),s("blockquote",[s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("!command-string\nInvoke a standard shell to execute command-string. Note that no space is\nneeded between ! and command-string. If it exists, the environment variable\nSHELL determines which shell to run. Otherwise gdb uses the default shell\n(‘/bin/sh’ on Unix systems, ‘COMMAND.COM’ on MS-DOS, etc.).\n\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br")])])]),e._v(" "),s("blockquote",[s("p",[e._v("pipe [command] | shell_command\n| [command] | shell_command\npipe -d delim command delim shell_command\n| -d delim command delim shell_command\nExecutes command and sends its output to shell command. Note that no space\nis needed around |. If no command is provided, the last command executed is\nrepeated.\nIn case the command contains a |, the option -d delim can be used to specify an alternate delimiter string delim that separates the command from the\nshell command.\nExample:")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("(gdb) p var\n$1 = {\n    black = 144,\n    red = 233,\n    green = 377,\n    blue = 610,\n    white = 987\n}\n(gdb) pipe p var|wc\n7 19 80\n(gdb) |p var|wc -l\n7\n(gdb) p /x var\n$4 = {\n    black = 0x90,\n    red = 0xe9,\n    green = 0x179,\n    blue = 0x262,\n    white = 0x3db\n}\n(gdb) ||grep red\nred => 0xe9,\n(gdb) | -d ! echo this contains a | char\\n ! sed -e ’s/|/PIPE/’\nthis contains a PIPE char\n(gdb) | -d xxx echo this contains a | char!\\n xxx sed -e ’s/|/PIPE/’\nthis contains a PIPE char!\n(gdb)\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br"),s("span",{staticClass:"line-number"},[e._v("22")]),s("br"),s("span",{staticClass:"line-number"},[e._v("23")]),s("br"),s("span",{staticClass:"line-number"},[e._v("24")]),s("br"),s("span",{staticClass:"line-number"},[e._v("25")]),s("br"),s("span",{staticClass:"line-number"},[e._v("26")]),s("br"),s("span",{staticClass:"line-number"},[e._v("27")]),s("br")])]),s("p",[e._v("The convenience variables $_shell_exitcode and $_shell_exitsignal can be used to\nexamine the exit status of the last shell command launched by shell, make, pipe and |.")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code")]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"})])]),e._v(" "),s("h1",{attrs:{id:"gdb-commands"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gdb-commands"}},[e._v("#")]),e._v(" GDB commands")]),e._v(" "),s("blockquote",[s("p",[e._v("set print elements NUMBER-OF-ELEMENTS\nset print array-indexes\nset print elements 10 # to change the limit of array elements to print")])])])}),[],!1,null,null,null);n.default=t.exports}}]);